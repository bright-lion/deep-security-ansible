# Copyright 2018, Trend Micro
#
# License as per [repo](master/LICENSE)
#
# *********************************************************************
# * Install the Deep Security Agent (For Windows only)
# *********************************************************************
---
# *********************************************************************
# * Detect the platform architecture
# *********************************************************************
- name: Setting facts (Win64)
  set_fact:
    agent_relative_path: software/agent/Windows/x86_64
    agent_local_path: "{{ ansible_env.TMP }}\\ds_agent.msi"
  when: ansible_os_family == "Windows" and ansible_architecture[:2] == "64"

- name: Setting facts (Win32)
  set_fact:
    agent_relative_path: software/agent/Windows/i386
    agent_local_path: "{{ ansible_env.TMP }}\\ds_agent.msi"
  when: ansible_os_family == "Windows" and ansible_architecture[:2] == "32"

- name: Make sure path is set properly
  debug:
    msg:
      - "agent_local_path: {{ agent_local_path }}"
      - "agent_relative_path: {{ agent_relative_path }}"

# *********************************************************************
# * Download Deep Security agent from Deep Security manager
# *********************************************************************
- debug:
    msg: "Download from: https://{{ dsm_agent_download_hostname }}:{{ dsm_agent_download_port }}/{{ agent_relative_path }}/"

- name: Download the Deep Security agent (Windows)
  win_get_url:
    url: "https://{{ dsm_agent_download_hostname }}:{{ dsm_agent_download_port }}/{{ agent_relative_path }}/"
    dest: "{{ agent_local_path }}"
    validate_certs: no
    timeout: 300
    force: yes
    use_proxy: false
  register: download_agent
  ignore_errors: true

# Tower上でNginxなどで /var/www/dsm-agents を公開している前提
- when: download_agent is failed
  block:
    - name: "Create /var/www/dsm-agents/{{ agent_relative_path }}"
      local_action: file
      args:
        path: '/var/www/dsm-agents/{{ agent_relative_path }}'
        state: directory
      become: true

    - name: Download the Deep Security agent to ansible local
      local_action: get_url
      args:
        url: "https://{{ dsm_agent_download_hostname }}:{{ dsm_agent_download_port }}/{{ agent_relative_path }}/"
        dest: '/var/www/dsm-agents/{{ agent_relative_path }}'
        validate_certs: no
        timeout: 300
        force: false
        use_proxy: false
      become: true

    - debug:
        msg: "/var/www/dsm-agents/{{ agent_relative_path }} to target host"

    - name: Download the Deep Security agent from ansible local
      win_get_url:
        url: "http://{{ dsm_agent_download_proxy_hostname }}:{{ dsm_agent_download_proxy_port }}/{{ agent_relative_path }}/"
        dest: "{{ agent_local_path }}"
        timeout: 300
        force: yes
        use_proxy: false

- win_stat:
    path: "{{ agent_local_path }}"
  register: agent_file

- name: Check file size
  debug:
    msg: "Downloaded DSA installer file size : {{ agent_file.stat.size }} bytes"

- fail:
    msg:
      - "Downloaded file size is not valid. There are two possiblities : 1. The OS platform is not supported. 2. Deep Security Manager don't provide agent software package installer for your OS platform."
      - "Please verify that agent software package for your platform is available using this reference article https://help.deepsecurity.trendmicro.com/10/0/Get-Started/Install/import-agent-software.html?redirected=true&Highlight=download"
  when: agent_file.stat.size == 0

# *********************************************************************
# * Install the agent
# *********************************************************************
# DSA MSI installer will prevent downgrade but allow upgrade. No operation is performed if version is equals.
- name: Install the Deep Security agent
  win_shell: (Start-Process -PassThru -Wait -FilePath msiexec -ArgumentList /i, "{{ agent_local_path }}", /qn, /l*v, "dsa_install.log").WaitForExit()

- name: Make sure the agent has gathered the required metadata
  pause:
    seconds: 5

# *********************************************************************
# * Make sure the service is running
# *********************************************************************
- name: Get service 'ds_agent' status
  win_shell: Get-WmiObject win32_service -Filter "Name = 'ds_agent' AND State = 'Running'"
  register: result

- name: Check service is on
  fail:
    msg: "Failed to start agent service"
  when: (result.stdout | regex_search('(Running)')) != "Running"

- debug:
    msg: "ds_agent package installed successfully"
